#!/usr/bin/env python3
"""
Script para validar y limpiar los datos extra√≠dos de c√≥digos CIE-10
y generar un reporte de calidad detallado
"""

import pandas as pd
import re
from collections import Counter
import csv

def validar_codigo_cie10(codigo):
    """Valida formato de c√≥digo CIE-10"""
    if not codigo or len(codigo) != 4:
        return False
    return bool(re.match(r'^[A-Z]\d{2}[\dX]$', codigo))

def limpiar_nombre_enfermedad(nombre):
    """Limpia y normaliza el nombre de la enfermedad"""
    if not nombre:
        return ""
    
    # Remover n√∫meros de lista del inicio
    nombre = re.sub(r'^\d+\s*', '', nombre)
    
    # Limpiar espacios m√∫ltiples
    nombre = re.sub(r'\s+', ' ', nombre)
    
    # Remover caracteres especiales al final
    nombre = nombre.strip('.,;:-')
    
    return nombre.strip()

def generar_reporte_calidad(archivo_csv):
    """Genera un reporte detallado de control de calidad"""
    
    print("=== REPORTE DE CONTROL DE CALIDAD ===\n")
    
    # Leer datos
    df = pd.read_csv(archivo_csv)
    
    # Estad√≠sticas b√°sicas
    total_registros = len(df)
    print(f"üìä ESTAD√çSTICAS B√ÅSICAS:")
    print(f"   Total de registros: {total_registros}")
    
    # Validar c√≥digos CIE-10
    codigos_validos = df[df['C√≥digo_CIE10'].apply(validar_codigo_cie10)]
    codigos_invalidos = df[~df['C√≥digo_CIE10'].apply(validar_codigo_cie10)]
    
    print(f"   C√≥digos CIE-10 v√°lidos: {len(codigos_validos)}")
    print(f"   C√≥digos CIE-10 inv√°lidos: {len(codigos_invalidos)}")
    
    # C√≥digos √∫nicos
    codigos_unicos = df[df['C√≥digo_CIE10'] != 'XXXX']['C√≥digo_CIE10'].nunique()
    print(f"   C√≥digos √∫nicos (sin XXXX): {codigos_unicos}")
    
    # Enfermedades sin c√≥digo
    sin_codigo = len(df[df['C√≥digo_CIE10'] == 'XXXX'])
    print(f"   Enfermedades sin c√≥digo: {sin_codigo}")
    
    # Duplicados por c√≥digo
    duplicados_codigo = df[df['C√≥digo_CIE10'] != 'XXXX'].groupby('C√≥digo_CIE10').size()
    codigos_duplicados = duplicados_codigo[duplicados_codigo > 1]
    
    print(f"\nüîç AN√ÅLISIS DE DUPLICADOS:")
    print(f"   C√≥digos que aparecen m√∫ltiples veces: {len(codigos_duplicados)}")
    
    if len(codigos_duplicados) > 0:
        print(f"   Top 10 c√≥digos m√°s repetidos:")
        for codigo, count in codigos_duplicados.head(10).items():
            print(f"     {codigo}: {count} veces")
    
    # Distribuci√≥n por categor√≠as CIE-10
    print(f"\nüìà DISTRIBUCI√ìN POR CATEGOR√çAS CIE-10:")
    categorias = df[df['C√≥digo_CIE10'] != 'XXXX']['C√≥digo_CIE10'].str[0].value_counts()
    for letra, count in categorias.head(10).items():
        print(f"   {letra}**: {count} c√≥digos")
    
    # Verificar formato de nombres
    print(f"\nüìù AN√ÅLISIS DE NOMBRES:")
    nombres_vacios = len(df[df['Nombre_Enfermedad'].str.strip() == ''])
    nombres_cortos = len(df[df['Nombre_Enfermedad'].str.len() < 5])
    nombres_con_numeros = len(df[df['Nombre_Enfermedad'].str.match(r'^\d+')])
    
    print(f"   Nombres vac√≠os: {nombres_vacios}")
    print(f"   Nombres muy cortos (<5 caracteres): {nombres_cortos}")
    print(f"   Nombres que empiezan con n√∫mero: {nombres_con_numeros}")
    
    # C√≥digos inv√°lidos detallados
    if len(codigos_invalidos) > 0:
        print(f"\n‚ùå C√ìDIGOS INV√ÅLIDOS ENCONTRADOS:")
        count = 0
        for idx, row in codigos_invalidos.head(10).iterrows():
            count += 1
            print(f"   Registro {count}: '{row['C√≥digo_CIE10']}' - {row['Nombre_Enfermedad'][:50]}...")
    
    # Generar archivo limpio
    print(f"\nüßπ GENERANDO ARCHIVO LIMPIO...")
    
    # Crear DataFrame limpio
    df_limpio = df.copy()
    
    # Limpiar nombres
    df_limpio['Nombre_Enfermedad'] = df_limpio['Nombre_Enfermedad'].apply(limpiar_nombre_enfermedad)
    
    # Marcar c√≥digos inv√°lidos como XXXX
    df_limpio.loc[~df_limpio['C√≥digo_CIE10'].apply(validar_codigo_cie10), 'C√≥digo_CIE10'] = 'XXXX'
    df_limpio.loc[~df_limpio['C√≥digo_CIE10'].apply(validar_codigo_cie10), 'Observaciones'] = 'C√≥digo inv√°lido corregido'
    
    # Filtrar registros con nombres muy cortos o vac√≠os
    df_limpio = df_limpio[df_limpio['Nombre_Enfermedad'].str.len() >= 5]
    
    # Renumerar
    df_limpio['N√∫mero'] = range(1, len(df_limpio) + 1)
    
    # Guardar archivo limpio
    archivo_limpio = archivo_csv.replace('.csv', '_limpio.csv')
    df_limpio.to_csv(archivo_limpio, index=False, encoding='utf-8')
    
    print(f"   Archivo limpio generado: {archivo_limpio}")
    print(f"   Registros en archivo limpio: {len(df_limpio)}")
    
    # Generar reporte detallado
    archivo_reporte = archivo_csv.replace('.csv', '_reporte.txt')
    with open(archivo_reporte, 'w', encoding='utf-8') as f:
        f.write("REPORTE DETALLADO DE EXTRACCI√ìN CIE-10\n")
        f.write("="*50 + "\n\n")
        f.write(f"Archivo original: {archivo_csv}\n")
        f.write(f"Total registros originales: {total_registros}\n")
        f.write(f"Total registros limpios: {len(df_limpio)}\n")
        f.write(f"C√≥digos CIE-10 v√°lidos: {len(codigos_validos)}\n")
        f.write(f"C√≥digos √∫nicos: {codigos_unicos}\n")
        f.write(f"Enfermedades sin c√≥digo: {sin_codigo}\n\n")
        
        f.write("C√ìDIGOS M√ÅS FRECUENTES:\n")
        f.write("-" * 30 + "\n")
        for codigo, count in duplicados_codigo.head(20).items():
            f.write(f"{codigo}: {count} veces\n")
        
        f.write("\nDISTRIBUCI√ìN POR CATEGOR√çAS:\n")
        f.write("-" * 30 + "\n")
        for letra, count in categorias.items():
            categoria_desc = obtener_descripcion_categoria(letra)
            f.write(f"{letra}** ({categoria_desc}): {count} c√≥digos\n")
        
        if len(codigos_invalidos) > 0:
            f.write("\nC√ìDIGOS INV√ÅLIDOS:\n")
            f.write("-" * 30 + "\n")
            count = 0
            for idx, row in codigos_invalidos.iterrows():
                count += 1
                f.write(f"Registro {count}: '{row['C√≥digo_CIE10']}' - {row['Nombre_Enfermedad']}\n")
    
    print(f"   Reporte detallado generado: {archivo_reporte}")
    
    return {
        'total_original': total_registros,
        'total_limpio': len(df_limpio),
        'codigos_validos': len(codigos_validos),
        'codigos_unicos': codigos_unicos,
        'sin_codigo': sin_codigo
    }

def obtener_descripcion_categoria(letra):
    """Obtiene descripci√≥n de categor√≠a CIE-10"""
    categorias = {
        'A': 'Enfermedades infecciosas y parasitarias',
        'B': 'Enfermedades infecciosas y parasitarias',
        'C': 'Neoplasias malignas',
        'D': 'Neoplasias benignas y sangre',
        'E': 'Enfermedades endocrinas y metab√≥licas',
        'F': 'Trastornos mentales y del comportamiento',
        'G': 'Enfermedades del sistema nervioso',
        'H': 'Enfermedades de √≥rganos sensoriales',
        'I': 'Enfermedades del sistema circulatorio',
        'J': 'Enfermedades del sistema respiratorio',
        'K': 'Enfermedades del sistema digestivo',
        'L': 'Enfermedades de la piel',
        'M': 'Enfermedades del sistema musculoesquel√©tico',
        'N': 'Enfermedades del sistema genitourinario',
        'O': 'Embarazo, parto y puerperio',
        'P': 'Afecciones del per√≠odo perinatal',
        'Q': 'Malformaciones cong√©nitas',
        'R': 'S√≠ntomas y signos anormales',
        'S': 'Traumatismos y envenenamientos',
        'T': 'Traumatismos y envenenamientos',
        'V': 'Causas externas',
        'W': 'Causas externas',
        'X': 'Causas externas',
        'Y': 'Causas externas',
        'Z': 'Factores que influyen en el estado de salud'
    }
    return categorias.get(letra, 'Categor√≠a desconocida')

def main():
    archivo_csv = "enfermedades_raras_cie10.csv"
    
    try:
        resultado = generar_reporte_calidad(archivo_csv)
        print(f"\n‚úÖ PROCESO COMPLETADO")
        print(f"   Registros procesados: {resultado['total_original']}")
        print(f"   Registros v√°lidos: {resultado['total_limpio']}")
        print(f"   Tasa de √©xito: {(resultado['total_limpio']/resultado['total_original']*100):.1f}%")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    main()
