#!/usr/bin/env python3
"""
Script mejorado para validar conectividad con Orphanet/Orphadata
Versi√≥n 2.0 - URLs actualizadas

Basado en documentaci√≥n oficial y URLs verificadas
Autor: An√°lisis GRD Enfermedades Raras
Fecha: Julio 2025
"""

import requests
import json
import time
from datetime import datetime
import sys
import warnings
try:
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
except ImportError:
    pass

# Configuraci√≥n mejorada
TIMEOUT = 10
USER_AGENT = "OrphanetValidator/2.0 (Research/Colombia)"

def print_banner():
    """Imprime banner de inicio"""
    print("=" * 80)
    print("üîç VALIDADOR DE CONECTIVIDAD ORPHANET v2.0")
    print("=" * 80)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üêç Python: {sys.version.split()[0]}")
    print("=" * 80)

def test_orphanet_main():
    """Prueba acceso al sitio principal de Orphanet"""
    print("\nüè† PRUEBA 1: Sitio Principal Orphanet")
    print("-" * 60)
    
    urls_principales = [
        "https://www.orpha.net",
        "http://www.orpha.net",
        "https://www.orphadata.org",
        "http://www.orphadata.org"
    ]
    
    results = {}
    
    for url in urls_principales:
        try:
            print(f"üîó Probando {url}...")
            
            headers = {"User-Agent": USER_AGENT}
            response = requests.get(url, timeout=TIMEOUT, headers=headers, verify=False)
            
            results[url] = {
                "status": f"‚úÖ HTTP {response.status_code}" if response.status_code < 400 else f"‚ùå HTTP {response.status_code}",
                "content_type": response.headers.get("content-type", "N/A"),
                "size_kb": round(len(response.content) / 1024, 2),
                "server": response.headers.get("server", "N/A")
            }
            
            if response.status_code < 400:
                print(f"   ‚úÖ {url}: Conectado - HTTP {response.status_code}")
            else:
                print(f"   ‚ùå {url}: HTTP {response.status_code}")
                
        except requests.exceptions.Timeout:
            results[url] = {"status": "‚è∞ TIMEOUT", "error": f"Timeout despu√©s de {TIMEOUT}s"}
            print(f"   ‚è∞ {url}: Timeout")
        except requests.exceptions.ConnectionError:
            results[url] = {"status": "üîå SIN CONEXI√ìN", "error": "Error de conexi√≥n"}
            print(f"   üîå {url}: Sin conexi√≥n")
        except Exception as e:
            results[url] = {"status": "‚ùå ERROR", "error": str(e)}
            print(f"   ‚ùå {url}: {str(e)}")
        
        time.sleep(0.5)
    
    return results

def test_orphadata_files():
    """Prueba acceso a archivos de Orphadata"""
    print("\nüìÅ PRUEBA 2: Archivos de Datos Orphadata")
    print("-" * 60)
    
    # URLs directas conocidas de archivos
    file_urls = [
        "http://www.orphadata.org/cgi-bin/rare_free.html",
        "https://www.orphadata.org/cgi-bin/rare_free.html",
        "http://www.orphadata.org/data/xml/en_product1.xml",
        "http://www.orphadata.org/data/xml/en_product3.xml"
    ]
    
    results = {}
    
    for url in file_urls:
        try:
            print(f"üìÑ Probando {url}...")
            
            headers = {"User-Agent": USER_AGENT}
            # Solo HEAD request para no descargar archivos grandes
            response = requests.head(url, timeout=TIMEOUT, headers=headers, verify=False)
            
            results[url] = {
                "status": f"‚úÖ HTTP {response.status_code}" if response.status_code < 400 else f"‚ùå HTTP {response.status_code}",
                "content_type": response.headers.get("content-type", "N/A"),
                "content_length": response.headers.get("content-length", "N/A"),
                "last_modified": response.headers.get("last-modified", "N/A")
            }
            
            if response.status_code < 400:
                size_info = "N/A"
                if response.headers.get("content-length"):
                    size_kb = round(int(response.headers["content-length"]) / 1024, 2)
                    size_info = f"{size_kb} KB"
                print(f"   ‚úÖ {url}: Disponible - Tama√±o: {size_info}")
            else:
                print(f"   ‚ùå {url}: HTTP {response.status_code}")
                
        except requests.exceptions.Timeout:
            results[url] = {"status": "‚è∞ TIMEOUT", "error": f"Timeout despu√©s de {TIMEOUT}s"}
            print(f"   ‚è∞ {url}: Timeout")
        except requests.exceptions.ConnectionError:
            results[url] = {"status": "üîå SIN CONEXI√ìN", "error": "Error de conexi√≥n"}
            print(f"   üîå {url}: Sin conexi√≥n")
        except Exception as e:
            results[url] = {"status": "‚ùå ERROR", "error": str(e)}
            print(f"   ‚ùå {url}: {str(e)}")
        
        time.sleep(0.5)
    
    return results

def test_orphanet_api_alternative():
    """Prueba APIs alternativas y recursos conocidos"""
    print("\nüåê PRUEBA 3: APIs y Recursos Alternativos")
    print("-" * 60)
    
    # URLs alternativas conocidas
    api_urls = [
        "https://api.orphacode.org",
        "http://api.orphacode.org",
        "https://www.orphadata.com/api",
        "http://www.orphadata.com/api"
    ]
    
    results = {}
    
    for url in api_urls:
        try:
            print(f"üîó Probando {url}...")
            
            headers = {"User-Agent": USER_AGENT}
            response = requests.get(url, timeout=TIMEOUT, headers=headers, verify=False)
            
            results[url] = {
                "status": f"‚úÖ HTTP {response.status_code}" if response.status_code < 400 else f"‚ùå HTTP {response.status_code}",
                "content_type": response.headers.get("content-type", "N/A"),
                "size_kb": round(len(response.content) / 1024, 2)
            }
            
            if response.status_code < 400:
                print(f"   ‚úÖ {url}: Conectado - HTTP {response.status_code}")
            else:
                print(f"   ‚ùå {url}: HTTP {response.status_code}")
                
        except requests.exceptions.Timeout:
            results[url] = {"status": "‚è∞ TIMEOUT", "error": f"Timeout despu√©s de {TIMEOUT}s"}
            print(f"   ‚è∞ {url}: Timeout")
        except requests.exceptions.ConnectionError:
            results[url] = {"status": "üîå SIN CONEXI√ìN", "error": "Error de conexi√≥n"}
            print(f"   üîå {url}: Sin conexi√≥n")
        except Exception as e:
            results[url] = {"status": "‚ùå ERROR", "error": str(e)}
            print(f"   ‚ùå {url}: {str(e)}")
        
        time.sleep(0.5)
    
    return results

def test_orphanet_search():
    """Prueba funcionalidad de b√∫squeda de Orphanet"""
    print("\nüîç PRUEBA 4: Funcionalidad de B√∫squeda Orphanet")
    print("-" * 60)
    
    # URLs de b√∫squeda conocidas
    search_urls = [
        "https://www.orpha.net/consor/cgi-bin/Disease_Search.php?lng=EN",
        "http://www.orpha.net/consor/cgi-bin/Disease_Search.php?lng=EN"
    ]
    
    results = {}
    
    for url in search_urls:
        try:
            print(f"üîç Probando {url}...")
            
            headers = {"User-Agent": USER_AGENT}
            response = requests.get(url, timeout=TIMEOUT, headers=headers, verify=False)
            
            results[url] = {
                "status": f"‚úÖ HTTP {response.status_code}" if response.status_code < 400 else f"‚ùå HTTP {response.status_code}",
                "content_type": response.headers.get("content-type", "N/A"),
                "size_kb": round(len(response.content) / 1024, 2),
                "has_search_form": "search" in response.text.lower() or "disease" in response.text.lower()
            }
            
            if response.status_code < 400:
                search_available = "‚úÖ Disponible" if results[url]["has_search_form"] else "‚ö†Ô∏è Sin formulario"
                print(f"   ‚úÖ {url}: Conectado - B√∫squeda: {search_available}")
            else:
                print(f"   ‚ùå {url}: HTTP {response.status_code}")
                
        except requests.exceptions.Timeout:
            results[url] = {"status": "‚è∞ TIMEOUT", "error": f"Timeout despu√©s de {TIMEOUT}s"}
            print(f"   ‚è∞ {url}: Timeout")
        except requests.exceptions.ConnectionError:
            results[url] = {"status": "üîå SIN CONEXI√ìN", "error": "Error de conexi√≥n"}
            print(f"   üîå {url}: Sin conexi√≥n")
        except Exception as e:
            results[url] = {"status": "‚ùå ERROR", "error": str(e)}
            print(f"   ‚ùå {url}: {str(e)}")
        
        time.sleep(0.5)
    
    return results

def test_manual_search():
    """Prueba b√∫squeda manual de una enfermedad conocida"""
    print("\nüß¨ PRUEBA 5: B√∫squeda Manual de Enfermedad")
    print("-" * 60)
    
    # T√©rminos de b√∫squeda de nuestro dataset
    search_terms = ["Marfan", "Alport", "Huntington", "Acondrog√©nesis", "Acromegalia", "Acalasia primaria"]
    base_url = "https://www.orpha.net/consor/cgi-bin/Disease_Search.php"
    
    results = {}
    
    for term in search_terms:
        try:
            print(f"üîç Buscando '{term}'...")
            
            params = {
                "lng": "EN",
                "data_id": "Pat",
                "search": "Disease_Search_Simple",
                "Typ": "Pat",
                "diseaseGroup": term
            }
            
            headers = {"User-Agent": USER_AGENT}
            response = requests.get(base_url, params=params, timeout=TIMEOUT, headers=headers, verify=False)
            
            # Buscar indicadores de resultados en la respuesta
            has_results = any(indicator in response.text.lower() for indicator in [
                "orpha number", "orphanet", "disease", "disorder", "syndrome"
            ])
            
            results[f"search_{term}"] = {
                "status": f"‚úÖ HTTP {response.status_code}" if response.status_code < 400 else f"‚ùå HTTP {response.status_code}",
                "search_term": term,
                "has_results": has_results,
                "content_size_kb": round(len(response.content) / 1024, 2)
            }
            
            if response.status_code < 400:
                result_status = "‚úÖ Con resultados" if has_results else "‚ö†Ô∏è Sin resultados"
                print(f"   ‚úÖ B√∫squeda '{term}': {result_status}")
            else:
                print(f"   ‚ùå B√∫squeda '{term}': HTTP {response.status_code}")
                
        except requests.exceptions.Timeout:
            results[f"search_{term}"] = {"status": "‚è∞ TIMEOUT", "error": f"Timeout despu√©s de {TIMEOUT}s"}
            print(f"   ‚è∞ B√∫squeda '{term}': Timeout")
        except requests.exceptions.ConnectionError:
            results[f"search_{term}"] = {"status": "üîå SIN CONEXI√ìN", "error": "Error de conexi√≥n"}
            print(f"   üîå B√∫squeda '{term}': Sin conexi√≥n")
        except Exception as e:
            results[f"search_{term}"] = {"status": "‚ùå ERROR", "error": str(e)}
            print(f"   ‚ùå B√∫squeda '{term}': {str(e)}")
        
        time.sleep(1)  # M√°s tiempo entre b√∫squedas
    
    return results

def generate_enhanced_report(results):
    """Genera reporte mejorado de conectividad"""
    print("\nüìä REPORTE DETALLADO DE CONECTIVIDAD ORPHANET")
    print("=" * 80)
    
    total_tests = 0
    successful_tests = 0
    
    for category, data in results.items():
        print(f"\nüî∏ {category}")
        print("-" * 50)
        
        for service, result in data.items():
            total_tests += 1
            status = result.get("status", "‚ùå DESCONOCIDO")
            
            if "‚úÖ" in status:
                successful_tests += 1
                
            print(f"   üìã {service}")
            print(f"   ‚îî‚îÄ Estado: {status}")
            
            # Informaci√≥n adicional seg√∫n el tipo de resultado
            if "content_type" in result:
                print(f"   ‚îî‚îÄ Tipo: {result['content_type']}")
            if "size_kb" in result:
                print(f"   ‚îî‚îÄ Tama√±o: {result['size_kb']} KB")
            if "has_results" in result:
                result_text = "‚úÖ S√≠" if result['has_results'] else "‚ùå No"
                print(f"   ‚îî‚îÄ Resultados: {result_text}")
            if "error" in result:
                print(f"   ‚îî‚îÄ Error: {result['error']}")
    
    # Resumen mejorado
    success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\nüìà AN√ÅLISIS GENERAL")
    print("=" * 80)
    print(f"‚úÖ Conexiones exitosas: {successful_tests}/{total_tests}")
    print(f"üìä Tasa de √©xito: {success_rate:.1f}%")
    
    # Estado general
    if success_rate >= 70:
        print("üéâ ESTADO: ORPHANET ACCESIBLE")
        status_icon = "üü¢"
    elif success_rate >= 40:
        print("‚ö†Ô∏è  ESTADO: ACCESO PARCIAL A ORPHANET")
        status_icon = "üü°"
    else:
        print("‚ùå ESTADO: PROBLEMAS GRAVES DE ACCESO")
        status_icon = "üî¥"
    
    # Recomendaciones espec√≠ficas
    print(f"\nüí° RECOMENDACIONES ESPEC√çFICAS")
    print("-" * 50)
    
    if successful_tests > 0:
        print("‚úÖ Orphanet est√° parcialmente accesible")
        print("‚úÖ Se puede proceder con homologaci√≥n manual de c√≥digos")
        print("‚úÖ Usar b√∫squedas directas en el sitio web como alternativa")
        
        if success_rate < 70:
            print("‚ö†Ô∏è  APIs autom√°ticas pueden estar limitadas")
            print("‚ö†Ô∏è  Considerar extracci√≥n manual o semi-autom√°tica")
        
        print("\nüîß ESTRATEGIAS SUGERIDAS:")
        print("   1. B√∫squeda manual en orpha.net para validaci√≥n")
        print("   2. Extracci√≥n de p√°ginas web espec√≠ficas")
        print("   3. Uso de c√≥digos Orph√° como referencia cruzada")
        print("   4. Integraci√≥n con APIs cuando est√©n disponibles")
        
    else:
        print("‚ùå Orphanet no est√° accesible actualmente")
        print("‚ùå Verificar conexi√≥n a internet")
        print("‚ùå Orphanet podr√≠a estar en mantenimiento")
        print("‚è∞ Reintentar en unas horas")
    
    print(f"\n{status_icon} Estado final: {success_rate:.1f}% de conectividad")
    print("=" * 80)
    
    return success_rate, status_icon

def main():
    """Funci√≥n principal mejorada"""
    print_banner()
    
    # Ejecutar todas las pruebas
    all_results = {}
    
    try:
        all_results["Sitio Principal"] = test_orphanet_main()
        all_results["Archivos de Datos"] = test_orphadata_files()
        all_results["APIs Alternativas"] = test_orphanet_api_alternative()
        all_results["Funcionalidad B√∫squeda"] = test_orphanet_search()
        all_results["B√∫squeda Manual"] = test_manual_search()
        
        # Generar reporte mejorado
        success_rate, status_icon = generate_enhanced_report(all_results)
        
        # Guardar reporte
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "success_rate": success_rate,
            "status_icon": status_icon,
            "test_results": all_results,
            "metadata": {
                "script_version": "2.0",
                "python_version": sys.version,
                "timeout": TIMEOUT,
                "total_tests": sum(len(data) for data in all_results.values())
            }
        }
        
        with open("orphanet_connectivity_report_v2.json", 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Reporte detallado guardado: orphanet_connectivity_report_v2.json")
        
        return success_rate
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Validaci√≥n interrumpida por el usuario")
        return 0
    except Exception as e:
        print(f"\n\n‚ùå Error inesperado: {str(e)}")
        return 0

if __name__ == "__main__":
    success_rate = main()
    print(f"\nüèÅ Validaci√≥n completada con {success_rate:.1f}% de √©xito")
    sys.exit(0 if success_rate > 0 else 1)
