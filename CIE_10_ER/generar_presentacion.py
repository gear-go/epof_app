#!/usr/bin/env python3
"""
Script para generar visualizaciones est√°ticas de presentaci√≥n
An√°lisis de Enfermedades Raras Colombia 2023
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib.patches import Patch
import warnings
warnings.filterwarnings('ignore')

def generar_presentacion():
    """Genera todas las visualizaciones para presentaci√≥n"""
    
    print("üé® GENERANDO VISUALIZACIONES DE PRESENTACI√ìN")
    print("="*50)
    
    # Cargar datos
    df = pd.read_csv("enfermedades_raras_colombia_2023_corregido.csv")
    
    # Configurar estilo
    plt.style.use('default')
    sns.set_palette("husl")
    plt.rcParams['figure.figsize'] = (16, 10)
    plt.rcParams['font.size'] = 12
    
    # 1. DASHBOARD PRINCIPAL
    fig = plt.figure(figsize=(20, 16))
    gs = fig.add_gridspec(4, 4, hspace=0.3, wspace=0.3)
    
    # T√≠tulo principal
    fig.suptitle('üìä ENFERMEDADES RARAS COLOMBIA 2023\nProcesamiento Manual + Verificaci√≥n IA (Claude Sonnet 4)', 
                 fontsize=24, fontweight='bold', y=0.95)
    
    # Estad√≠sticas principales
    total_enf = len(df)
    sin_codigo = len(df[df['C√≥digo_CIE10'] == 'XXXX'])
    correcciones = len(df[df['Observaciones'].str.contains('C√≥digo corregido', na=False)])
    codigos_unicos = len(df[df['C√≥digo_CIE10'] != 'XXXX']['C√≥digo_CIE10'].unique())
    
    # Subplot 1: Estad√≠sticas clave
    ax1 = fig.add_subplot(gs[0, :2])
    stats = [total_enf, codigos_unicos, correcciones, total_enf-sin_codigo]
    labels = ['Total\nEnfermedades', 'C√≥digos\n√önicos', 'Correcciones\n0‚ÜíQ', 'C√≥digos\nV√°lidos']
    colors = ['#3498DB', '#E74C3C', '#F39C12', '#27AE60']
    
    bars = ax1.bar(labels, stats, color=colors, alpha=0.8)
    ax1.set_title('üìä Estad√≠sticas Principales', fontsize=16, fontweight='bold')
    ax1.grid(axis='y', alpha=0.3)
    
    for bar, stat in zip(bars, stats):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + max(stats)*0.01,
                f'{stat:,}', ha='center', va='bottom', fontweight='bold', fontsize=14)
    
    # Subplot 2: Distribuci√≥n por categor√≠as
    ax2 = fig.add_subplot(gs[0, 2:])
    codigos_validos = df[df['C√≥digo_CIE10'] != 'XXXX'].copy()
    codigos_validos['Categoria'] = codigos_validos['C√≥digo_CIE10'].str[0]
    conteo_cat = codigos_validos['Categoria'].value_counts().head(8)
    
    colors_cat = sns.color_palette("Set3", len(conteo_cat))
    wedges, texts, autotexts = ax2.pie(list(conteo_cat.values), labels=list(conteo_cat.index), 
                                       autopct='%1.1f%%', colors=colors_cat, startangle=90)
    ax2.set_title('ü•ß Top 8 Categor√≠as CIE-10', fontsize=16, fontweight='bold')
    
    # Subplot 3: Impacto de correcciones
    ax3 = fig.add_subplot(gs[1, :2])
    metodos = ['Antes\n(C√≥digos 0***)', 'Despu√©s\n(Categor√≠a Q)']
    valores_imp = [correcciones, len(df[df['C√≥digo_CIE10'].str.startswith('Q', na=False)])]
    
    bars3 = ax3.bar(metodos, valores_imp, color=['#E74C3C', '#27AE60'], alpha=0.8)
    ax3.set_title('üîß Impacto de Correcciones 0‚ÜíQ', fontsize=16, fontweight='bold')
    ax3.grid(axis='y', alpha=0.3)
    
    for bar in bars3:
        height = bar.get_height()
        ax3.text(bar.get_x() + bar.get_width()/2., height + max(valores_imp)*0.01,
                f'{int(height):,}', ha='center', va='bottom', fontweight='bold', fontsize=14)
    
    # Subplot 4: Comparaci√≥n metodol√≥gica
    ax4 = fig.add_subplot(gs[1, 2:])
    metodos_comp = ['Extracci√≥n\nAutom√°tica', 'Procesamiento\nManual']
    enf_comp = [964, total_enf]
    cod_comp = [384, codigos_unicos]
    
    x = np.arange(len(metodos_comp))
    width = 0.35
    
    bars4_1 = ax4.bar(x - width/2, enf_comp, width, label='Total Enfermedades', color='#3498DB', alpha=0.8)
    bars4_2 = ax4.bar(x + width/2, cod_comp, width, label='C√≥digos √önicos', color='#E74C3C', alpha=0.8)
    
    ax4.set_xlabel('M√©todo')
    ax4.set_title('‚öñÔ∏è Comparaci√≥n Metodol√≥gica', fontsize=16, fontweight='bold')
    ax4.set_xticks(x)
    ax4.set_xticklabels(metodos_comp)
    ax4.legend()
    ax4.grid(axis='y', alpha=0.3)
    
    # Subplot 5: Distribuci√≥n detallada categor√≠as
    ax5 = fig.add_subplot(gs[2, :])
    top_10_cat = conteo_cat.head(10)
    categorias_desc = {
        'Q': 'Malformaciones cong√©nitas',
        'E': 'Endocrinas/metab√≥licas', 
        'D': 'Neoplasias/sangre',
        'G': 'Sistema nervioso',
        'H': '√ìrganos sensoriales',
        'M': 'Musculoesquel√©tico',
        'L': 'Piel',
        'K': 'Digestivo',
        'I': 'Circulatorio',
        'C': 'Neoplasias malignas'
    }
    
    colors_det = sns.color_palette("tab10", len(top_10_cat))
    bars5 = ax5.bar(range(len(top_10_cat)), list(top_10_cat.values), color=colors_det, alpha=0.8)
    
    ax5.set_xlabel('Categor√≠as CIE-10')
    ax5.set_ylabel('N√∫mero de Enfermedades')
    ax5.set_title('üìà Distribuci√≥n Detallada por Categor√≠as CIE-10', fontsize=16, fontweight='bold')
    ax5.set_xticks(range(len(top_10_cat)))
    ax5.set_xticklabels([f"{cat}\n{categorias_desc.get(cat, 'Otra')}" for cat in top_10_cat.index], 
                       rotation=45, ha='right')
    ax5.grid(axis='y', alpha=0.3)
    
    for bar in bars5:
        height = bar.get_height()
        ax5.text(bar.get_x() + bar.get_width()/2., height + max(list(top_10_cat.values))*0.01,
                f'{int(height)}', ha='center', va='bottom', fontweight='bold')
    
    # Subplot 6: Calidad del dataset
    ax6 = fig.add_subplot(gs[3, :2])
    calidad_labels = ['C√≥digos\nV√°lidos', 'Sin\nC√≥digo']
    calidad_valores = [total_enf - sin_codigo, sin_codigo]
    calidad_colors = ['#27AE60', '#E74C3C']
    
    bars6 = ax6.bar(calidad_labels, calidad_valores, color=calidad_colors, alpha=0.8)
    ax6.set_title('‚úÖ Calidad del Dataset', fontsize=16, fontweight='bold')
    ax6.grid(axis='y', alpha=0.3)
    
    for bar, valor in zip(bars6, calidad_valores):
        height = bar.get_height()
        porcentaje = (valor / total_enf) * 100
        ax6.text(bar.get_x() + bar.get_width()/2., height + max(calidad_valores)*0.01,
                f'{valor:,}\n({porcentaje:.1f}%)', ha='center', va='bottom', fontweight='bold')
    
    # Subplot 7: Fuente y metodolog√≠a
    ax7 = fig.add_subplot(gs[3, 2:])
    ax7.text(0.5, 0.9, 'üìö FUENTE OFICIAL', ha='center', va='top', fontsize=14, fontweight='bold', 
             transform=ax7.transAxes)
    ax7.text(0.5, 0.8, 'Resoluci√≥n 023 de 2023', ha='center', va='top', fontsize=12, 
             transform=ax7.transAxes)
    ax7.text(0.5, 0.7, 'Ministerio de Salud y Protecci√≥n Social de Colombia', ha='center', va='top', 
             fontsize=10, transform=ax7.transAxes)
    
    ax7.text(0.5, 0.5, 'üî¨ METODOLOG√çA', ha='center', va='top', fontsize=14, fontweight='bold', 
             transform=ax7.transAxes)
    ax7.text(0.5, 0.4, '‚Ä¢ Extracci√≥n manual de datos', ha='center', va='top', fontsize=10, 
             transform=ax7.transAxes)
    ax7.text(0.5, 0.3, '‚Ä¢ Correcci√≥n c√≥digos 0‚ÜíQ', ha='center', va='top', fontsize=10, 
             transform=ax7.transAxes)
    ax7.text(0.5, 0.2, '‚Ä¢ Verificaci√≥n IA (Claude Sonnet 4)', ha='center', va='top', fontsize=10, 
             transform=ax7.transAxes)
    ax7.text(0.5, 0.1, '‚Ä¢ Validaci√≥n CIE-10 completa', ha='center', va='top', fontsize=10, 
             transform=ax7.transAxes)
    
    ax7.set_xlim(0, 1)
    ax7.set_ylim(0, 1)
    ax7.axis('off')
    
    # Agregar l√≠nea de tiempo en el pie
    fig.text(0.5, 0.02, 'Enero 2025 | UDD Research | Enfermedades Raras', 
             ha='center', va='bottom', fontsize=12, style='italic')
    
    plt.savefig('presentacion_enfermedades_raras_colombia_2023.png', dpi=300, bbox_inches='tight')
    plt.show()
    print("‚úÖ Dashboard principal guardado: presentacion_enfermedades_raras_colombia_2023.png")
    
    # 2. GR√ÅFICO INSIGHTS CLAVE
    fig, ax = plt.subplots(figsize=(16, 10))
    
    insights_data = {
        'M√©trica': ['Total\nEnfermedades', 'Mejora vs\nAutom√°tico', 'Correcciones\nAplicadas', 
                   'Tasa de\nPrecisi√≥n', 'C√≥digos\n√önicos', 'Cobertura\nCompleta'],
        'Valor': [2249, 133, 1041, 96.9, 641, 100],
        'Unidad': ['', '%', '', '%', '', '%'],
        'Color': ['#3498DB', '#27AE60', '#F39C12', '#E74C3C', '#9B59B6', '#1ABC9C']
    }
    
    bars = ax.bar(insights_data['M√©trica'], insights_data['Valor'], 
                  color=insights_data['Color'], alpha=0.8)
    
    ax.set_title('üí° INSIGHTS CLAVE - ENFERMEDADES RARAS COLOMBIA 2023\n' + 
                'Procesamiento Manual + Verificaci√≥n IA Generativa', 
                fontsize=18, fontweight='bold', pad=20)
    ax.set_ylabel('Valor de la M√©trica', fontsize=14)
    ax.grid(axis='y', alpha=0.3)
    
    # Agregar valores encima de las barras
    for bar, valor, unidad in zip(bars, insights_data['Valor'], insights_data['Unidad']):
        height = bar.get_height()
        if unidad:
            texto = f'{valor}{unidad}'
        else:
            texto = f'{valor:,}'
        ax.text(bar.get_x() + bar.get_width()/2., height + max(insights_data['Valor'])*0.01,
                texto, ha='center', va='bottom', fontweight='bold', fontsize=14)
    
    # Agregar fuente
    ax.text(0.5, -0.12, 'Fuente: Resoluci√≥n 023 de 2023 - Ministerio de Salud y Protecci√≥n Social de Colombia', 
            ha='center', va='bottom', transform=ax.transAxes, fontsize=12, style='italic')
    
    plt.tight_layout()
    plt.savefig('insights_clave_colombia_2023.png', dpi=300, bbox_inches='tight')
    plt.show()
    print("‚úÖ Insights clave guardado: insights_clave_colombia_2023.png")
    
    print(f"\nüéØ RESUMEN PARA PRESENTACI√ìN:")
    print(f"üìä {total_enf:,} enfermedades raras procesadas")
    print(f"üîß {correcciones:,} correcciones 0‚ÜíQ aplicadas")
    print(f"‚úÖ {((total_enf-sin_codigo)/total_enf)*100:.1f}% de precisi√≥n lograda")
    print(f"üèÜ Mejora del {((total_enf/964)-1)*100:.0f}% vs extracci√≥n autom√°tica")

if __name__ == "__main__":
    generar_presentacion()
